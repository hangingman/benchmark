;; DOMAIN:    Geometric Quantities
;; THEORY:    RCF
;; LEVEL:     4
;; SOURCE:    Chart System Math I+A Yellow Book, Problem 07CY1E217
;; AUTHOR:    Jumma Kudo
;; GENERATED: 2014-12-25

(namespace 3d)

(def-directive p1
  (Find (St)
    (exists (O X Y Z A P B Q C R F G)
      (&&
        (perpendicular (line O X) (line O Y))
        (perpendicular (line O X) (line O Z))
        (perpendicular (line O Y) (line O Z))
        (on A (half-line O X))
        (on P (half-line O X))
        (on B (half-line O Y))
        (on Q (half-line O Y))
        (on C (half-line O Z))
        (on R (half-line O Z))
        (= (length-of (seg O A)) 1)
        (= (length-of (seg O B)) 1)
        (= (length-of (seg O C)) 1)
        (<= 1 t) (<= t 2)
        (= (length-of (seg O P)) t)
        (= (length-of (seg O Q)) t)
        (= (length-of (seg O R)) t)
        (= F (cube O A B (vec->point (v+ (vec (origin) A) (vec (origin) B))) C (vec->point (v+ (vec (origin) A) (vec (origin) C))) (vec->point (v+ (vec (origin) C) (vec (origin) B))) (vec->point (v+ (v+ (vec (origin) A) (vec (origin) B)) (vec (origin) C)))))
        (= G (triangle P Q R))
        (= St (area-of (shape-of-cpfun (PLam T (&& (on T G) (on T F))))))
      )
    )
  )
)

(def-directive p2
  (Find (t)
    (exists (O X Y Z A P B Q C R F G St)
      (&&
        (perpendicular (line O X) (line O Y))
        (perpendicular (line O X) (line O Z))
        (perpendicular (line O Y) (line O Z))
        (on A (half-line O X))
        (on P (half-line O X))
        (on B (half-line O Y))
        (on Q (half-line O Y))
        (on C (half-line O Z))
        (on R (half-line O Z))
        (= (length-of (seg O A)) 1)
        (= (length-of (seg O B)) 1)
        (= (length-of (seg O C)) 1)
        (<= 1 t) (<= t 2)
        (= (length-of (seg O P)) t)
        (= (length-of (seg O Q)) t)
        (= (length-of (seg O R)) t)
        (= F (cube O A B (vec->point (v+ (vec (origin) A) (vec (origin) B))) C (vec->point (v+ (vec (origin) A) (vec (origin) C))) (vec->point (v+ (vec (origin) C) (vec (origin) B))) (vec->point (v+ (v+ (vec (origin) A) (vec (origin) B)) (vec (origin) C)))))
        (= G (triangle P Q R))
        (= St (area-of (shape-of-cpfun (PLam T (&& (on T G) (on T F))))))
        (forall (s P2 Q2 R2)
          (-> (&&  (on P2 (half-line O X))
            (on Q2 (half-line O Y))
            (on R2 (half-line O Z))
            (= (length-of (seg O P2)) s)
            (= (length-of (seg O Q2)) s)
            (= (length-of (seg O R2)) s)
            )
            (>= St (area-of (shape-of-cpfun (PLam T (&& (on T (triangle P2 Q2 R2)) (on T F))))))
          )
        )
      )
    )
  )
)

(def-directive p3
  (Find (St)
    (exists (O X Y Z A P B Q C R F G t)
      (&&
        (perpendicular (line O X) (line O Y))
        (perpendicular (line O X) (line O Z))
        (perpendicular (line O Y) (line O Z))
        (on A (half-line O X))
        (on P (half-line O X))
        (on B (half-line O Y))
        (on Q (half-line O Y))
        (on C (half-line O Z))
        (on R (half-line O Z))
        (= (length-of (seg O A)) 1)
        (= (length-of (seg O B)) 1)
        (= (length-of (seg O C)) 1)
        (<= 1 t) (<= t 2)
        (= (length-of (seg O P)) t)
        (= (length-of (seg O Q)) t)
        (= (length-of (seg O R)) t)
        (= F (cube O A B (vec->point (v+ (vec (origin) A) (vec (origin) B))) C (vec->point (v+ (vec (origin) A) (vec (origin) C))) (vec->point (v+ (vec (origin) C) (vec (origin) B))) (vec->point (v+ (v+ (vec (origin) A) (vec (origin) B)) (vec (origin) C)))))
        (= G (triangle P Q R))
        (= St (area-of (shape-of-cpfun (PLam T (&& (on T G) (on T F))))))
        (forall (s P2 Q2 R2)
          (-> (&&  (on P2 (half-line O X))
            (on Q2 (half-line O Y))
            (on R2 (half-line O Z))
            (= (length-of (seg O P2)) s)
            (= (length-of (seg O Q2)) s)
            (= (length-of (seg O R2)) s)
            )
            (>= St (area-of (shape-of-cpfun (PLam T (&& (on T (triangle P2 Q2 R2)) (on T F))))))
              )
          )
      )
    )
  )
)

(def-answer p1 (PLam St (= St (- (- (* 3 (sqrt 3) t) (* (sqrt 3) (^ t 2))) (* 3 (/ (sqrt 3) 2))))))

(def-answer p2 (PLam t (= t (/ 3 2))))

(def-answer p3 (PLam St (= St (* (/ 3 4) (sqrt 3)))))

